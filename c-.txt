program declaration-list declaration var-declaration type-specifier fun-declaration params param-list param expression return-stmt iteration-stmt selection-stmt expression-stmt statement statement-list local-declarations compound-stmt var simple-expression relop additive-expression addop term mulop factor call args arg-list
int void ID NUM [ ] ; ( ) , + - * / < <= > >= == != { } = epsilon
program -> declaration-list
declaration-list -> declaration-list declaration
declaration-list -> declaration
declaration -> var-declaration | fun-declaration
var-declaration -> type-specifier ID ; | type-specifier ID [ NUM ] ;
type-specifier -> int | void
fun-declaration -> type-specifier ID ( params ) compound-stmt 
params -> param-list | void
param-list -> param-list , param | param
param -> type-specifier ID | type-specifier ID [ ]
compound-stmt -> { local-declarations statement-list }
local-declarations -> local-declarations var-declaration | epsilon
statement-list -> statement-list statement | epsilon
statement -> expression-stmt | compound-stmt | selection-stmt | iteration-stmt | return-stmt
expression-stmt -> expression ; | ;
selection-stmt -> if ( expression ) statement | if ( expression ) statement else statement
iteration-stmt -> while ( expression ) statement
return-stmt -> return ; | return expression ;
expression -> var = expression | simple-expression
var -> ID | ID [ expression ]
simple-expression -> additive-expression relop additive-expression | additive-expression
relop -> <= | < | > | >= | == | !=
additive-expression -> additive-expression addop term | term
addop -> + | -
term -> term mulop factor | factor
mulop -> * | /
factor -> ( expression ) | var | call | NUM
call -> ID ( args )
args -> arg-list | epsilon
arg-list -> arg-list , expression | expression